{"version":3,"sources":["store/GlobalState.js","components/KCtracts.js","components/KCneighborhoods.js","components/Map.js","components/Nav.js","components/Chart.js","App.js","index.js"],"names":["StoreContext","createContext","initialState","tracts","neighborhoods","intromsg","overlay","overlaymsg","chart","driveAlone","drivePool","publicTransport","walk","subHeading","reducer","state","action","type","payload","Store","children","useReducer","dispatch","Provider","value","kcTractsLayer","require","KCtracts","useContext","polygonPaint","MapboxGL","linePaint","getTractID","shid","match","changeMouseToPointer","useCallback","event","target","getCanvas","style","cursor","changeMouseToDefault","showInfo","features","properties","data","fillPaint","fillOnClick","fillOnMouseEnter","fillOnMouseLeave","fillOnMouseMove","kcNeighborhoodsLayer","KCneighborhoods","getNeighborhoodName","replace","toUpperCase","Mapbox","ReactMapboxGl","accessToken","process","minZoom","mapState","center","zoom","Map","contStyle","useMediaQuery","query","height","width","position","top","left","containerStyle","className","Nav","background","onClick","border","Chart","labelOptions","chartOptions","chartData","isTabletOrMobile","checkState","enabled","format","color","pie","allowPointSelect","size","dataLabels","borderColor","name","y","selected","options","backgroundColor","plotBackgroundColor","plotBorderWidth","plotShadow","title","text","margin","fontWeight","fontSize","subtitle","tooltip","pointFormat","accessibility","point","valueSuffix","plotOptions","series","colorByPoint","highcharts","Highcharts","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.15c03672.chunk.js","sourcesContent":["// A global context/store to pass data through the component tree\n\nimport React, { createContext, useReducer } from 'react';\n\nexport const StoreContext = createContext({});\n\n// initial states\nconst initialState = {\n  tracts: true,\n  neighborhoods: false,\n  intromsg: true,\n  overlay: false,\n  overlaymsg: '',\n  chart: false,\n  driveAlone: 0,\n  drivePool: 0,\n  publicTransport: 0,\n  walk: 0,\n  subHeading: '',\n};\n\n// Reducer to specify state changes\nfunction reducer(state, action) {\n  switch (action.type) {\n    case 'SET_TRACTS':\n      return {\n        ...state,\n        tracts: action.payload,\n      };\n    case 'SET_NBHD':\n      return {\n        ...state,\n        neighborhoods: action.payload,\n      };\n    case 'SET_INTROMSG':\n      return {\n        ...state,\n        intromsg: action.payload,\n      };\n    case 'SET_OVERLAY':\n      return {\n        ...state,\n        overlay: action.payload,\n      };\n    case 'SET_OVERLAYMSG':\n      return {\n        ...state,\n        overlaymsg: action.payload,\n      };\n    case 'SET_CHART':\n      return {\n        ...state,\n        chart: action.payload,\n      };\n\n    case 'SET_DALONE':\n      return {\n        ...state,\n        driveAlone: action.payload,\n      };\n\n    case 'SET_DPOOL':\n      return {\n        ...state,\n        drivePool: action.payload,\n      };\n\n    case 'SET_PTRANSPORT':\n      return {\n        ...state,\n        publicTransport: action.payload,\n      };\n\n    case 'SET_WALK':\n      return {\n        ...state,\n        walk: action.payload,\n      };\n\n    case 'SET_SUBHEADING':\n      return {\n        ...state,\n        subHeading: action.payload,\n      };\n\n    default:\n      return state;\n  }\n}\n\nconst Store = ({ children }) => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  return (\n    <StoreContext.Provider value={[state, dispatch]}>\n      {children}\n    </StoreContext.Provider>\n  );\n};\n\nexport default Store;\n","// Component for adding KC tracts layer to map\n\n// Dependency imports\nimport React, { useContext, useCallback } from 'react';\nimport { GeoJSONLayer } from 'react-mapbox-gl';\nimport * as MapboxGL from 'mapbox-gl';\n\n// Relative imports\nimport { StoreContext } from '../store/GlobalState';\nconst kcTractsLayer = require('../data/kc-tracts.json');\n\nconst KCtracts = () => {\n  const [state, dispatch] = useContext(StoreContext);\n\n  // Initializing default polygon/feature fill values\n  let polygonPaint = (MapboxGL.FillPaint = {\n    'fill-color': '#627BC1',\n    'fill-opacity': 0.5,\n  });\n\n  // Initializing default boundary values\n  let linePaint = (MapboxGL.LinePaint = {\n    'line-color': '#627BC1',\n    'line-width': 2,\n  });\n\n  /**\n   * A function expression to extract Tract ID using regEx\n   * @param {string} shid - The SHID property of a tract\n   */\n  const getTractID = (shid) => {\n    let numSplit = shid.match('(?<=tract:).*');\n    return numSplit[0];\n  };\n\n  const getFeatureInfo = (event) => {\n    dispatch({\n      type: 'SET_DALONE',\n      payload: event.features[0].properties['pop-commute-drive_alone'],\n    });\n    dispatch({\n      type: 'SET_DPOOL',\n      payload: event.features[0].properties['pop-commute-drive_carpool'],\n    });\n    dispatch({\n      type: 'SET_PTRANSPORT',\n      payload: event.features[0].properties['pop-commute-public_transit'],\n    });\n    dispatch({\n      type: 'SET_WALK',\n      payload: event.features[0].properties['pop-commute-walk'],\n    });\n    dispatch({\n      type: 'SET_SUBHEADING',\n      payload: `Tract ${getTractID(event.features[0].properties['shid'])}`,\n    });\n    dispatch({ type: 'SET_INTROMSG', payload: false });\n    dispatch({ type: 'SET_CHART', payload: true });\n  };\n\n  // Change mouse cursor to pointer on hover over polygons/tracts\n  const changeMouseToPointer = useCallback((event) => {\n    const map = event.target;\n    map.getCanvas().style.cursor = 'pointer';\n  }, []);\n\n  // Revert mouse cursor style\n  const changeMouseToDefault = useCallback(\n    (event) => {\n      dispatch({\n        type: 'SET_OVERLAY',\n        payload: false,\n      });\n      const map = event.target;\n      map.getCanvas().style.cursor = '';\n    },\n    [dispatch]\n  );\n\n  // Display Tract ID as a map overlay\n  const showInfo = useCallback(\n    (event) => {\n      dispatch({\n        type: 'SET_OVERLAYMSG',\n        payload: `Tract ${getTractID(event.features[0].properties['shid'])}`,\n      });\n      dispatch({\n        type: 'SET_OVERLAY',\n        payload: true,\n      });\n    },\n    [dispatch]\n  );\n\n  return (\n    <>\n      {state.tracts && (\n        <>\n          <GeoJSONLayer\n            data={kcTractsLayer}\n            fillPaint={polygonPaint}\n            fillOnClick={getFeatureInfo}\n            fillOnMouseEnter={changeMouseToPointer}\n            fillOnMouseLeave={changeMouseToDefault}\n            fillOnMouseMove={showInfo}\n          />\n          <GeoJSONLayer data={kcTractsLayer} linePaint={linePaint} />\n        </>\n      )}\n    </>\n  );\n};\n\nexport default KCtracts;\n","// Component for adding KC neighborhoods layer to map\n\n// Dependency imports\nimport React, { useContext, useCallback } from 'react';\nimport { GeoJSONLayer } from 'react-mapbox-gl';\nimport * as MapboxGL from 'mapbox-gl';\n\n// Relative imports\nimport { StoreContext } from '../store/GlobalState';\nconst kcNeighborhoodsLayer = require('../data/kc-neighborhoods.json');\n\nconst KCneighborhoods = () => {\n  const [state, dispatch] = useContext(StoreContext);\n\n  // Initializing default polygon/feature fill values\n  let polygonPaint = (MapboxGL.FillPaint = {\n    'fill-color': '#088',\n    'fill-opacity': 0.5,\n  });\n\n  // Initializing default boundary values\n  let linePaint = (MapboxGL.LinePaint = {\n    'line-color': '#088',\n    'line-width': 2,\n  });\n\n  /**\n   * A function expression to extract Neighborhood name using regEx\n   * @param {string} shid - The SHID property of a neighborhood\n   */\n  const getNeighborhoodName = (shid) => {\n    let nameSplit = shid.match('(?<=neighborhood:).*');\n    return nameSplit[0].replace(/_/g, ' ').toUpperCase();\n  };\n\n  const getFeatureInfo = (event) => {\n    dispatch({\n      type: 'SET_DALONE',\n      payload: event.features[0].properties['pop-commute-drive_alone'],\n    });\n    dispatch({\n      type: 'SET_DPOOL',\n      payload: event.features[0].properties['pop-commute-drive_carpool'],\n    });\n    dispatch({\n      type: 'SET_PTRANSPORT',\n      payload: event.features[0].properties['pop-commute-public_transit'],\n    });\n    dispatch({\n      type: 'SET_WALK',\n      payload: event.features[0].properties['pop-commute-walk'],\n    });\n    dispatch({\n      type: 'SET_SUBHEADING',\n      payload: `${getNeighborhoodName(event.features[0].properties['shid'])}`,\n    });\n    dispatch({ type: 'SET_INTROMSG', payload: false });\n    dispatch({ type: 'SET_CHART', payload: true });\n  };\n\n  // Change mouse cursor to pointer on hover over polygons/neighborhoods\n  const changeMouseToPointer = useCallback((event) => {\n    const map = event.target;\n    map.getCanvas().style.cursor = 'pointer';\n  }, []);\n\n  // Revert mouse cursor style\n  const changeMouseToDefault = useCallback(\n    (event) => {\n      dispatch({\n        type: 'SET_OVERLAY',\n        payload: false,\n      });\n      const map = event.target;\n      map.getCanvas().style.cursor = '';\n    },\n    [dispatch]\n  );\n\n  // Display Neighborhood name as a map overlay\n  const showInfo = useCallback(\n    (event) => {\n      dispatch({\n        type: 'SET_OVERLAYMSG',\n        payload: `${getNeighborhoodName(event.features[0].properties['shid'])}`,\n      });\n      dispatch({\n        type: 'SET_OVERLAY',\n        payload: true,\n      });\n    },\n    [dispatch]\n  );\n\n  return (\n    <>\n      {state.neighborhoods && (\n        <>\n          <GeoJSONLayer\n            data={kcNeighborhoodsLayer}\n            fillPaint={polygonPaint}\n            fillOnClick={getFeatureInfo}\n            fillOnMouseEnter={changeMouseToPointer}\n            fillOnMouseLeave={changeMouseToDefault}\n            fillOnMouseMove={showInfo}\n          />\n          <GeoJSONLayer data={kcNeighborhoodsLayer} linePaint={linePaint} />\n        </>\n      )}\n    </>\n  );\n};\n\nexport default KCneighborhoods;\n","// Component for creating a Mapbox map\n\n// Dependency imports\nimport React, { useContext } from 'react';\nimport ReactMapboxGl from 'react-mapbox-gl';\nimport { useMediaQuery } from 'react-responsive';\n\n// Relative imports\nimport KCtracts from './KCtracts';\nimport { StoreContext } from '../store/GlobalState';\nimport KCneighborhoods from './KCneighborhoods';\n\n// Initializing default Mapbox values\nconst Mapbox = ReactMapboxGl({\n  accessToken: process.env.REACT_APP_MAPBOX_API_KEY,\n  minZoom: 8,\n});\n\nconst mapState = {\n  center: [-94.578331, 39.099724],\n  zoom: [9],\n};\n\nconst mapboxStyle = 'mapbox://styles/mapbox/dark-v10';\n\nconst Map = () => {\n  const [state] = useContext(StoreContext);\n\n  // Media query to change dimensions\n  const isTabletOrMobile = useMediaQuery({ query: '(max-width: 1224px)' });\n\n  // Initializing value for Mapbox container style\n  let contStyle;\n\n  // Setting up container style based on screen width\n  isTabletOrMobile\n    ? (contStyle = {\n        height: '55vh',\n        width: '100vw',\n        position: 'absolute',\n        top: '0',\n        left: '0',\n      })\n    : (contStyle = {\n        height: '100vh',\n        width: '70vw',\n        position: 'absolute',\n        top: '0',\n        left: '0',\n      });\n\n  return (\n    <>\n      <div>\n        <Mapbox\n          // eslint-disable-next-line react/style-prop-object\n          style={mapboxStyle}\n          center={mapState.center}\n          zoom={mapState.zoom}\n          containerStyle={contStyle}\n        >\n          <KCtracts />\n          <KCneighborhoods />\n          {state.overlay && (\n            <div className=\"overlay-msg\">\n              <p>{state.overlaymsg}</p>\n            </div>\n          )}\n        </Mapbox>\n      </div>\n    </>\n  );\n};\n\nexport default Map;\n","// Component for creating a nav to toggle between layers\n\n// Dependency import\nimport React, { useContext } from 'react';\n\n// Relative import\nimport { StoreContext } from '../store/GlobalState';\n\nconst Nav = () => {\n  const [state, dispatch] = useContext(StoreContext);\n\n  // Handle clicks on tract polygons/features\n  function _handleTractClick() {\n    dispatch({ type: 'SET_TRACTS', payload: !state.tracts });\n  }\n\n  // Handle clicks on neighborhood polygons/features\n  function _handleNeighborhoodClick() {\n    dispatch({ type: 'SET_NBHD', payload: !state.neighborhoods });\n  }\n\n  return (\n    <>\n      <nav className=\"menu\">\n        <button\n          className=\"menu-items\"\n          style={{ background: state.tracts && '#3887be' }}\n          onClick={_handleTractClick}\n        >\n          Tracts\n        </button>\n        <button\n          className=\"menu-items\"\n          style={{\n            background: state.neighborhoods && '#3887be',\n            border: 'none',\n          }}\n          onClick={_handleNeighborhoodClick}\n        >\n          Neighborhoods\n        </button>\n      </nav>\n    </>\n  );\n};\n\nexport default Nav;\n","// Component for creating a Pie Chart\n\n// Dependency imports\nimport React, { useContext } from 'react';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\nimport { useMediaQuery } from 'react-responsive';\n\n// Relative import\nimport { StoreContext } from '../store/GlobalState';\n\nconst Chart = () => {\n  const [state] = useContext(StoreContext);\n\n  // Media query to change dimensions\n  const isTabletOrMobile = useMediaQuery({ query: '(max-width: 1224px)' });\n\n  // Initializing properties required for piechart\n  let labelOptions, chartOptions, chartData;\n\n  // Conditions to check against\n  const checkState =\n    state.driveAlone !== 0 &&\n    state.drivePool !== 0 &&\n    !state.publicTransport !== 0 &&\n    !state.walk !== 0;\n\n  // Setting up piechart labels based on the established conditions\n  checkState\n    ? (labelOptions = {\n        enabled: true,\n        format: '<b>{point.name}</b>: {point.percentage:.1f} %',\n        color: '#fffffe',\n      })\n    : (labelOptions = {\n        enabled: false,\n      });\n\n  // Setting up container style based on screen width\n  isTabletOrMobile\n    ? (chartOptions = {\n        pie: {\n          allowPointSelect: true,\n          size: 80,\n          cursor: 'pointer',\n          dataLabels: labelOptions,\n          borderColor: checkState ? '#ffffff' : null,\n        },\n      })\n    : (chartOptions = {\n        pie: {\n          allowPointSelect: true,\n          cursor: 'pointer',\n          dataLabels: labelOptions,\n          borderColor: checkState ? '#ffffff' : null,\n        },\n      });\n\n  // Setting up piechart data based on the established conditions\n  checkState\n    ? (chartData = [\n        {\n          name: 'Drive Alone',\n          y: state.driveAlone,\n          selected: true,\n          color: '#4BA451',\n        },\n        {\n          name: 'Carpool',\n          y: state.drivePool,\n          color: '#00A5E6',\n        },\n        {\n          name: 'Transit',\n          y: state.publicTransport,\n          color: '#CE7E2C',\n        },\n        {\n          name: 'Walking',\n          y: state.walk,\n          color: '#8185E9',\n        },\n      ])\n    : (chartData = [\n        {\n          name: '',\n          y: 100,\n          selected: true,\n          color: 'transparent',\n        },\n      ]);\n\n  // Initializing the options for the piechart\n  let options = {\n    chart: {\n      backgroundColor: '#222B2F',\n      plotBackgroundColor: null,\n      plotBorderWidth: null,\n      plotShadow: false,\n      type: 'pie',\n    },\n    title: {\n      text: checkState\n        ? 'Commuter information for'\n        : 'No information available',\n      margin: isTabletOrMobile ? -100 : 50,\n      style: {\n        color: '#fffffe',\n        fontWeight: 'bold',\n        fontSize: '20px',\n      },\n    },\n    subtitle: {\n      text: state.subHeading,\n      style: {\n        color: '#FFEACE',\n        fontWeight: 'bold',\n        fontSize: '14px',\n      },\n    },\n    tooltip: {\n      pointFormat: '{series.name}: <b>{point.percentage:.1f}%</b>',\n    },\n    accessibility: {\n      point: {\n        valueSuffix: '%',\n      },\n    },\n    plotOptions: chartOptions,\n    series: [\n      {\n        name: 'Commute',\n        colorByPoint: true,\n        data: chartData,\n      },\n    ],\n  };\n\n  return (\n    <>\n      {state.intromsg && (\n        <div className=\"chart\">\n          <h2 className=\"intro-info\">\n            Click on a tract for <br />\n            commuter information\n          </h2>\n        </div>\n      )}\n      {state.chart && (\n        <div className=\"chart\">\n          <HighchartsReact highcharts={Highcharts} options={options} />\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default Chart;\n","// Dependency import\nimport React from 'react';\n\n// Relative imports\nimport './App.css';\nimport Store from './store/GlobalState';\nimport Map from './components/Map';\nimport Nav from './components/Nav';\nimport Chart from './components/Chart';\n\nfunction App() {\n  return (\n    <Store>\n      <Map />\n      <Nav />\n      <Chart />\n    </Store>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App.js';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}